{"version":3,"sources":["components/write/write.module.css","components/header/header.module.css","components/login/login.module.css","components/imageUploader/imageUploader.module.css","components/chatList/chatList.module.css","components/chatUI/chatUI.module.css","components/chat/chat.module.css","App.js","serviceWorker.js","service/firebase.js","service/auth_service.js","service/chat_repository.js","service/profileImg_repository.js","service/image_uploader.js","components/imageUploader/imageUploader.jsx","index.js"],"names":["module","exports","App","FileInput","authService","chatRepository","profileImgRepository","Boolean","window","location","hostname","match","firebaseApp","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","AuthService","providerName","authProvider","auth","signInWithPopup","onUserChanged","onAuthStateChanged","user","signOut","ChatRepository","userId","onUpdate","ref","database","on","snapshot","value","val","off","chat","id","set","ProfileImgRepository","profile","console","log","ImageUploadApp","file","data","FormData","append","fetch","method","body","result","json","ImageUploader","name","onFileChange","inputRef","useRef","onChange","event","a","upload","target","files","uploaded","original_filename","url","className","styles","container","input","type","accept","button","onClick","preventDefault","current","click","imageUploadApp","ReactDOM","render","StrictMode","props","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84941d69.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"writeWrap\":\"write_writeWrap__2VpuR\",\"profileSection\":\"write_profileSection__Ix-lF\",\"profileImg\":\"write_profileImg__aqaQ_\",\"textWriteSection\":\"write_textWriteSection__mBFxB\",\"from\":\"write_from__2y_wO\",\"nickName\":\"write_nickName__1Vk4h\",\"textarea\":\"write_textarea__2b3_E\",\"button\":\"write_button__CaOzm\",\"hidden\":\"write_hidden__314Zw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"headerWrap\":\"header_headerWrap__mZ537\",\"logo\":\"header_logo__2fWyJ\",\"logOut\":\"header_logOut__B0oWF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"login\":\"login_login__2GGt-\",\"title\":\"login_title__2nSIo\",\"list\":\"login_list__SBdHV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"imageUploader_container__2xNDm\",\"input\":\"imageUploader_input__xeCkA\",\"button\":\"imageUploader_button__3vlJd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"chatListWrap\":\"chatList_chatListWrap__2miJJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"chatWrap\":\"chatUI_chatWrap__2TuXB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"chatWrap\":\"chat_chatWrap__bI7iV\",\"chat\":\"chat_chat__j8Rnq\",\"profileTrue\":\"chat_profileTrue__3qqHV\",\"profileFalse\":\"chat_profileFalse__2lJ6q\",\"profilePic\":\"chat_profilePic__SgX_y\",\"messageBox\":\"chat_messageBox__2wjwj\",\"messageTrue\":\"chat_messageTrue__20g1p\",\"messageFalse\":\"chat_messageFalse__3BXaM\",\"hidden\":\"chat_hidden__341NE\"};","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './components/login/login'\nimport Chat from './components/chatUI/chatUI';\n\n\nfunction App({ FileInput, authService, chatRepository, profileImgRepository }) {\n  return (\n    // <Router basename={process.env.PUBLIC_URL}>\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <Login authService={authService} />\n        </Route>\n        <Route path='/chat' exact>\n          <Chat authService={authService} chatRepository={chatRepository} FileInput={FileInput} profileImgRepository={profileImgRepository}/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DB_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebaseApp;","import firebase from 'firebase';\r\nimport firebaseApp from './firebase';\r\n\r\nclass AuthService {\r\n  // 로그인\r\n  login(providerName) {\r\n    const authProvider = new firebase.auth[`${providerName}AuthProvider`]();\r\n    return firebase.auth().signInWithPopup(authProvider);\r\n  }\r\n\r\n  // 유저 로그인 상태 확인\r\n  onAuthChange(onUserChanged) {\r\n    firebase.auth().onAuthStateChanged(user =>{\r\n      onUserChanged(user);\r\n    })\r\n  }\r\n\r\n  // 로그아웃 처리\r\n  logout() {\r\n    firebase.auth().signOut();\r\n  }\r\n}\r\n\r\nexport default AuthService;","import firebaseApp from './firebase';\r\n\r\nclass ChatRepository {\r\n  // 채팅리스트 싱크\r\n  syncChat(userId, onUpdate) {\r\n    const ref = firebaseApp.database().ref(`/chatList/`);\r\n    ref.on('value', snapshot => {\r\n      const value = snapshot.val();\r\n      value && onUpdate(value);\r\n    });\r\n    return () => ref.off();\r\n  }\r\n\r\n  // DB에 채팅내용 저장\r\n  saveChat(chat) {\r\n    firebaseApp.database().ref(`/chatList/${chat.id}`).set(chat);\r\n  }\r\n}\r\n\r\nexport default ChatRepository;","import firebaseApp from './firebase';\r\n\r\nclass ProfileImgRepository {\r\n  // 프로필이미지 싱크\r\n  syncProfile(userId, onUpdate) {\r\n    const ref = firebaseApp.database().ref(`/profileImg/${userId}/`);\r\n    ref.on('value', snapshot => {\r\n      const value = snapshot.val();\r\n      value && onUpdate(value);\r\n    });\r\n    return () => ref.off();\r\n  }\r\n  \r\n  // DB에 채팅내용 저장\r\n  saveProfile(userId, profile) {\r\n    console.log(`${userId}의 프로필이 업데이트됨`);\r\n    firebaseApp.database().ref(`/profile/${userId}`).set(profile);\r\n  }\r\n}\r\n\r\nexport default ProfileImgRepository;","class ImageUploadApp {\r\n  async upload(file){\r\n    // POST에 추가하는 데이터\r\n    const data = new FormData();\r\n    data.append('file', file);\r\n    data.append('upload_preset', 'clpjntmu')\r\n\r\n    // POST로 데이터 전송\r\n    const result = await fetch(\r\n      'https://api.cloudinary.com/v1_1/dxb2t5sxu/image/upload',\r\n      {\r\n        method: 'POST',\r\n        body: data,\r\n      }\r\n    );\r\n    // 리턴 받은걸 JSON으로 변환\r\n    return await result.json(); \r\n  }\r\n}\r\n\r\nexport default ImageUploadApp;","import React from 'react'; \r\nimport { useRef } from 'react';\r\nimport styles from './imageUploader.module.css';\r\n\r\nconst ImageUploader = ({ ImageUploadApp, name, onFileChange }) => {\r\n  // input에 접근하기 위해\r\n  const inputRef = useRef();\r\n  \r\n  // button 클릭시 input이 클릭되게 \r\n  const onButtonClick = (event) => {\r\n    event.preventDefault();\r\n    inputRef.current.click();\r\n  }\r\n\r\n  //\r\n  const onChange = async event => {\r\n    const uploaded = await ImageUploadApp.upload(event.target.files[0]);\r\n    \r\n    onFileChange({\r\n    name: uploaded.original_filename,\r\n    url: uploaded.url,\r\n    })\r\n  }\r\n\r\n  return <div className={styles.container}>\r\n    <input ref={inputRef} className={styles.input} type='file' accept='image/*' name='file'onChange={onChange}/>\r\n    <button className={styles.button} onClick={onButtonClick}>\r\n      {name || '프로필 이미지 변경'}\r\n    </button>\r\n  </div>\r\n};\r\n\r\nexport default ImageUploader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AuthService from './service/auth_service';\nimport ChatRepository from './service/chat_repository';\nimport ProfileImgRepository from './service/profileImg_repository';\nimport ImageUploadApp from './service/image_uploader';\nimport ImageUploader from './components/imageUploader/imageUploader';\n\n\n\nconst authService = new AuthService();\nconst chatRepository = new ChatRepository();\nconst profileImgRepository = new ProfileImgRepository();\nconst imageUploadApp = new ImageUploadApp();\nconst FileInput = props => (<ImageUploader {...props} ImageUploadApp={imageUploadApp}/>);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      authService={authService} \n      chatRepository={chatRepository}\n      profileImgRepository={profileImgRepository}\n      FileInput={FileInput}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}