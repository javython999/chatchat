{"version":3,"sources":["components/write/write.module.css","components/header/header.module.css","components/login/login.module.css","components/imageUploader/imageUploader.module.css","components/chatList/chatList.module.css","components/chatUI/chatUI.module.css","components/chat/chat.module.css","components/header/header.jsx","components/login/login.jsx","components/chat/chat.jsx","components/chatList/chatList.jsx","components/write/write.jsx","components/chatUI/chatUI.jsx","App.js","serviceWorker.js","service/firebase.js","service/auth_service.js","service/chat_repository.js","service/profileImg_repository.js","service/image_uploader.js","components/imageUploader/imageUploader.jsx","index.js"],"names":["module","exports","Header","onLogout","className","styles","headerWrap","logo","src","alt","logOut","onClick","Login","authService","history","useHistory","onLogin","event","login","currentTarget","textContent","then","data","goToChat","user","uid","userId","push","pathname","state","id","useEffect","onAuthChange","stlyes","title","list","Chat","chat","nickName","message","fileURL","fileName","wirterId","wirterIdRef","useRef","url","loginId","test","chatWrap","profileTrue","profileFalse","profilePic","ref","hidden","value","messageBox","messageTrue","messageFalse","ChatList","chats","chatListWrap","Object","keys","map","key","Write","FileInput","onAdd","nickNameRef","onProfileAdd","messageRef","buttonRef","useState","file","setFile","profile","setProfile","writeWrap","profileSection","profileImg","name","onFileChange","current","console","log","textWriteSection","from","placeholder","textarea","onKeyPress","click","maxLength","preventDefault","Date","now","focus","button","ChatUI","chatRepository","profileImgRepository","setChats","histroyState","setUserId","stopSync","syncChat","syncProfile","logout","saveChat","saveProfile","App","basename","process","path","exact","Boolean","window","location","hostname","match","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","AuthService","providerName","authProvider","auth","signInWithPopup","onUserChanged","onAuthStateChanged","signOut","ChatRepository","onUpdate","database","on","snapshot","val","off","set","ProfileImgRepository","ImageUploadApp","FormData","append","fetch","method","body","result","json","ImageUploader","inputRef","onChange","a","upload","target","files","uploaded","original_filename","container","input","type","accept","imageUploadApp","ReactDOM","render","StrictMode","props","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.06d1d1ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"writeWrap\":\"write_writeWrap__2VpuR\",\"profileSection\":\"write_profileSection__Ix-lF\",\"profileImg\":\"write_profileImg__aqaQ_\",\"textWriteSection\":\"write_textWriteSection__mBFxB\",\"from\":\"write_from__2y_wO\",\"nickName\":\"write_nickName__1Vk4h\",\"textarea\":\"write_textarea__2b3_E\",\"button\":\"write_button__CaOzm\",\"hidden\":\"write_hidden__314Zw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"headerWrap\":\"header_headerWrap__mZ537\",\"logo\":\"header_logo__2fWyJ\",\"logOut\":\"header_logOut__B0oWF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"login\":\"login_login__2GGt-\",\"title\":\"login_title__2nSIo\",\"list\":\"login_list__SBdHV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"imageUploader_container__2xNDm\",\"input\":\"imageUploader_input__xeCkA\",\"button\":\"imageUploader_button__3vlJd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"chatListWrap\":\"chatList_chatListWrap__2miJJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"chatWrap\":\"chatUI_chatWrap__2TuXB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#303f9f\",\"indigoLight\":\"#666ad1\",\"indigoDark\":\"#001970\",\"chatWrap\":\"chat_chatWrap__bI7iV\",\"chat\":\"chat_chat__j8Rnq\",\"profileTrue\":\"chat_profileTrue__3qqHV\",\"profileFalse\":\"chat_profileFalse__2lJ6q\",\"profilePic\":\"chat_profilePic__SgX_y\",\"messageBox\":\"chat_messageBox__2wjwj\",\"messageTrue\":\"chat_messageTrue__20g1p\",\"messageFalse\":\"chat_messageFalse__3BXaM\",\"hidden\":\"chat_hidden__341NE\"};","import React from 'react';\r\nimport styles from './header.module.css'\r\n\r\nconst logo = 'https://res.cloudinary.com/dxb2t5sxu/image/upload/v1603180284/segsnloldaod0ogus9as.png';\r\nconst Header = ({ onLogout }) => (\r\n  <div className={styles.headerWrap}>\r\n      <h1>ChatChat</h1>\r\n      <img className={styles.logo} src={logo} alt='logo'/>\r\n      {\r\n        onLogout && (<button className={styles.logOut} onClick={onLogout}>LogOut</button>)\r\n      }\r\n  </div>\r\n  );\r\n\r\nexport default Header","import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from '../header/header';\r\nimport stlyes from './login.module.css';\r\n\r\nconst Login = ({ authService }) => {\r\n  \r\n  // 로그인 처리를 위한 history 생성\r\n  const history = useHistory();\r\n\r\n  // 로그인\r\n  const onLogin = (event) => {\r\n    authService\r\n    .login(event.currentTarget.textContent)\r\n    .then(data => goToChat(data.user.uid));\r\n  };\r\n\r\n  // 로그인 성공시 페이지 이동, 로그인 데이터 전달\r\n  const goToChat = (userId) => {\r\n    history.push({\r\n      pathname: '/chat',\r\n      state: {id: userId},\r\n    });\r\n  };\r\n\r\n  // 사용자의 로그인 상태 확인\r\n  useEffect(() =>{\r\n      authService.onAuthChange(user => {\r\n        // 로그인을 한 유저라면 /chat으로 이동시킴\r\n        user && goToChat(user.uid);\r\n      });\r\n  });\r\n\r\n  return(\r\n    <div className={stlyes.login}>\r\n      <Header/>\r\n      <h1 className={stlyes.title}>Login</h1>\r\n      <ul className={stlyes.list}>\r\n        <li><button onClick={onLogin}>Google</button></li>\r\n        <li><button onClick={onLogin}>Facebook</button></li>\r\n        {/* <li><button onClick={onLogin}>Twitter</button></li> */}\r\n      </ul>\r\n    </div>\r\n    \r\n  )\r\n};\r\n\r\nexport default Login;","import React, { useRef } from 'react';\r\nimport styles from './chat.module.css';\r\n\r\n// 프로필 사진이 없는 경우 사용할 이미지\r\nconst DEFAULT_IMAGE = 'https://res.cloudinary.com/dxb2t5sxu/image/upload/v1603180201/fy3fttdlp5binlzarb2u.png';\r\n\r\nconst Chat = ({ chat, userId }) => {\r\n  const {id, nickName, message, fileName, fileURL, wirterId} = chat;\r\n  const wirterIdRef = useRef();\r\n\r\n  // 프로필 사진이 있는 경우 해당 이미지 사용, 없는 경우 디폴트 이미지 사용\r\n  const url = fileURL || DEFAULT_IMAGE;\r\n  \r\n  // 작성자 아이디와 로그인 아이디를 비교\r\n  const loginId = userId;\r\n  const test = chat.wirterId\r\n\r\n  return(\r\n    <div className={styles.chatWrap}>\r\n      <div className={styles.chat}>\r\n        <section className={(loginId === test)? styles.profileTrue : styles.profileFalse}>\r\n          <img className={styles.profilePic} src={url} alt='profile'/>\r\n          <span className={styles.nickName}>{nickName}</span>\r\n          <input ref={wirterIdRef} className={styles.hidden} value={wirterId} />\r\n        </section>\r\n        <section className={styles.messageBox}>\r\n          <div className={(loginId === test)? styles.messageTrue : styles.messageFalse}>{message}</div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;","import React, { Component, useRef } from 'react';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport Chat from '../chat/chat';\r\nimport stlyes from './chatList.module.css';\r\n\r\nconst ChatList = ({ chats, userId }) => {\r\n\r\n\r\n  return(\r\n      <ScrollToBottom  className={stlyes.chatListWrap}>\r\n        {Object.keys(chats).map(key => (\r\n          <Chat key={key} chat={chats[key]} userId={userId}/>\r\n        ))}\r\n      </ScrollToBottom>\r\n      )\r\n  };\r\n\r\n\r\nexport default ChatList;","import React, { useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport styles from './write.module.css';\r\n\r\nconst DEFAULT_IMAGE = 'https://res.cloudinary.com/dxb2t5sxu/image/upload/v1603180201/fy3fttdlp5binlzarb2u.png';\r\n\r\nconst Write = ({ FileInput, onAdd, userId, onProfileAdd }) => {\r\n  const nickNameRef = useRef();\r\n  const messageRef = useRef();  \r\n  const buttonRef = useRef();\r\n  const wirterIdRef = useRef();\r\n  const loginId = userId;\r\n\r\n  // 프로필 이미지\r\n  const [file, setFile] = useState({fileName: null, fileURL: null});\r\n  \r\n  const [profile, setProfile] = useState({nickName: null, file: null});\r\n\r\n  // 프로필 이미지 업로드시\r\n  const onFileChange = file => {\r\n    setFile({\r\n      fileName: file.name,\r\n      fileURL: file.url,\r\n    });\r\n    \r\n    setProfile({\r\n      nickName: nickNameRef.current.value,\r\n      file: file.url,\r\n    });\r\n    \r\n    /*onProfileAdd(loginId, profile); */\r\n    console.log(profile);   \r\n  };\r\n\r\n\r\n  // 메세지 입력후 엔터키 누르면 전송\r\n  const handleeKyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      buttonRef.current.click();\r\n    }\r\n  };\r\n\r\n  // 메세지 등록\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    const chat = {\r\n      id: Date.now(),\r\n      wirterId: wirterIdRef.current.value,\r\n      nickName: nickNameRef.current.value || 'unknown',\r\n      message: messageRef.current.value || '',\r\n      fileName: file.fileName || '',\r\n      fileURL: file.fileURL || '',\r\n    };\r\n    onAdd(chat);\r\n    messageRef.current.value = null;\r\n    messageRef.current.focus();\r\n  };\r\n  \r\n  return(\r\n      <div className={styles.writeWrap}>\r\n        <section className={styles.profileSection}>\r\n          <img className={styles.profileImg} src={file.fileURL || DEFAULT_IMAGE} alt='profile' />\r\n            <FileInput name={file.fileName} onFileChange={onFileChange} />\r\n        </section>\r\n        <section className={styles.textWriteSection}>\r\n          <form className={styles.from}>\r\n            <input ref={wirterIdRef} className={styles.hidden} name='wirterId' value={loginId}/>\r\n            <input ref={nickNameRef} className={styles.nickName} name='nickName' placeholder='닉네임'/>  \r\n            <textarea ref={messageRef} className={styles.textarea} name='message' placeholder='메세지를 입력해주세요' onKeyPress={handleeKyPress} maxLength={36}/>\r\n            <button ref={buttonRef} onClick={onSubmit} className={styles.button}>전송</button>\r\n          </form>\r\n        </section>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default Write;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ChatList from '../chatList/chatList';\r\nimport Header from '../header/header';\r\nimport Write from '../write/write';\r\nimport styles from './chatUI.module.css';\r\n\r\nconst ChatUI = ({ FileInput, authService, chatRepository, profileImgRepository }) => {\r\n  const [chats, setChats] = useState({});\r\n  const histroyState = useHistory().state;\r\n  const [userId, setUserId] = useState(histroyState && histroyState.id);\r\n  const [profile, setProfile] = useState({});\r\n  const history = useHistory();\r\n\r\n  // 로그아웃 처리\r\n  const onLogout = () => {\r\n    authService.logout();\r\n  };\r\n\r\n  useEffect(()=>{\r\n    authService.onAuthChange(user => {\r\n      // 로그아웃시(유저 정보가 없을시) 홈으로 이동\r\n      if(user) {\r\n        setUserId(user.uid);\r\n      } else {\r\n        history.push('/');\r\n        console.log('로그아웃');\r\n      }\r\n    });\r\n  });\r\n\r\n  // 채팅 sync\r\n  useEffect(() => {\r\n    if(!userId) {\r\n      return;\r\n    }\r\n    const stopSync = chatRepository.syncChat(userId, chats => {\r\n      setChats(chats);\r\n    })\r\n    return () => { stopSync(); }\r\n  }, [userId])\r\n\r\n  // 채팅 추가\r\n  const addChat = (chat) => {\r\n    const updated = [chat]\r\n    setChats(updated);\r\n    chatRepository.saveChat(chat);\r\n  };\r\n\r\n  // 프로필 이미지 sync\r\n  useEffect(()=>{\r\n    if(!userId) {\r\n      return;\r\n    }\r\n    const stopSync = profileImgRepository.syncProfile(userId, profile => {\r\n      setProfile(profile);\r\n    })\r\n    return () => { stopSync(); }\r\n  }, [userId])\r\n  \r\n\r\n  // 프로필 이미지 추가\r\n  const addProfile = (loginId, profile) => {\r\n    const updated = [profile]\r\n    setProfile(updated);\r\n    profileImgRepository.saveProfile(loginId, profile);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.chatWrap}>\r\n      <Header onLogout={onLogout}/>\r\n      <ChatList chats={chats} userId={userId}/>\r\n      <Write FileInput={FileInput} onAdd={addChat} userId={userId} onProfileAdd={addProfile}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatUI;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './components/login/login'\nimport Chat from './components/chatUI/chatUI';\n\n\nfunction App({ FileInput, authService, chatRepository, profileImgRepository }) {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n    {/* <Router> */}\n      <Switch>\n        <Route path='/' exact>\n          <Login authService={authService} />\n        </Route>\n        <Route path='/chat' exact>\n          <Chat authService={authService} chatRepository={chatRepository} FileInput={FileInput} profileImgRepository={profileImgRepository}/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DB_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebaseApp;","import firebase from 'firebase';\r\nimport firebaseApp from './firebase';\r\n\r\nclass AuthService {\r\n  // 로그인\r\n  login(providerName) {\r\n    const authProvider = new firebase.auth[`${providerName}AuthProvider`]();\r\n    return firebase.auth().signInWithPopup(authProvider);\r\n  }\r\n\r\n  // 유저 로그인 상태 확인\r\n  onAuthChange(onUserChanged) {\r\n    firebase.auth().onAuthStateChanged(user =>{\r\n      onUserChanged(user);\r\n    })\r\n  }\r\n\r\n  // 로그아웃 처리\r\n  logout() {\r\n    firebase.auth().signOut();\r\n  }\r\n}\r\n\r\nexport default AuthService;","import firebaseApp from './firebase';\r\n\r\nclass ChatRepository {\r\n  // 채팅리스트 싱크\r\n  syncChat(userId, onUpdate) {\r\n    const ref = firebaseApp.database().ref(`/chatList/`);\r\n    ref.on('value', snapshot => {\r\n      const value = snapshot.val();\r\n      value && onUpdate(value);\r\n    });\r\n    return () => ref.off();\r\n  }\r\n\r\n  // DB에 채팅내용 저장\r\n  saveChat(chat) {\r\n    firebaseApp.database().ref(`/chatList/${chat.id}`).set(chat);\r\n  }\r\n}\r\n\r\nexport default ChatRepository;","import firebaseApp from './firebase';\r\n\r\nclass ProfileImgRepository {\r\n  // 프로필이미지 싱크\r\n  syncProfile(userId, onUpdate) {\r\n    const ref = firebaseApp.database().ref(`/profileImg/${userId}/`);\r\n    ref.on('value', snapshot => {\r\n      const value = snapshot.val();\r\n      value && onUpdate(value);\r\n    });\r\n    return () => ref.off();\r\n  }\r\n  \r\n  // DB에 채팅내용 저장\r\n  saveProfile(userId, profile) {\r\n    console.log(`${userId}의 프로필이 업데이트됨`);\r\n    firebaseApp.database().ref(`/profile/${userId}`).set(profile);\r\n  }\r\n}\r\n\r\nexport default ProfileImgRepository;","class ImageUploadApp {\r\n  async upload(file){\r\n    // POST에 추가하는 데이터\r\n    const data = new FormData();\r\n    data.append('file', file);\r\n    data.append('upload_preset', 'clpjntmu')\r\n\r\n    // POST로 데이터 전송\r\n    const result = await fetch(\r\n      'https://api.cloudinary.com/v1_1/dxb2t5sxu/image/upload',\r\n      {\r\n        method: 'POST',\r\n        body: data,\r\n      }\r\n    );\r\n    // 리턴 받은걸 JSON으로 변환\r\n    return await result.json(); \r\n  }\r\n}\r\n\r\nexport default ImageUploadApp;","import React from 'react'; \r\nimport { useRef } from 'react';\r\nimport styles from './imageUploader.module.css';\r\n\r\nconst ImageUploader = ({ ImageUploadApp, name, onFileChange }) => {\r\n  // input에 접근하기 위해\r\n  const inputRef = useRef();\r\n  \r\n  // button 클릭시 input이 클릭되게 \r\n  const onButtonClick = (event) => {\r\n    event.preventDefault();\r\n    inputRef.current.click();\r\n  }\r\n\r\n  //\r\n  const onChange = async event => {\r\n    const uploaded = await ImageUploadApp.upload(event.target.files[0]);\r\n    \r\n    onFileChange({\r\n    name: uploaded.original_filename,\r\n    url: uploaded.url,\r\n    })\r\n  }\r\n\r\n  return <div className={styles.container}>\r\n    <input ref={inputRef} className={styles.input} type='file' accept='image/*' name='file'onChange={onChange}/>\r\n    <button className={styles.button} onClick={onButtonClick}>\r\n      {name || '프로필 이미지 변경'}\r\n    </button>\r\n  </div>\r\n};\r\n\r\nexport default ImageUploader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AuthService from './service/auth_service';\nimport ChatRepository from './service/chat_repository';\nimport ProfileImgRepository from './service/profileImg_repository';\nimport ImageUploadApp from './service/image_uploader';\nimport ImageUploader from './components/imageUploader/imageUploader';\n\n\n\nconst authService = new AuthService();\nconst chatRepository = new ChatRepository();\nconst profileImgRepository = new ProfileImgRepository();\nconst imageUploadApp = new ImageUploadApp();\nconst FileInput = props => (<ImageUploader {...props} ImageUploadApp={imageUploadApp}/>);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      authService={authService} \n      chatRepository={chatRepository}\n      profileImgRepository={profileImgRepository}\n      FileInput={FileInput}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}